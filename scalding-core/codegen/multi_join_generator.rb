#!/usr/bin/env ruby

# Run it like this:
#
#   ./codegen/multi_join_generator.rb > src/main/scala/com/twitter/scalding/GeneratedCoGroupableMultiJoins.scala

$indent = "  "

TYPES = ('A'..'Z').to_a

def make_multi_joins(joinType, arity)
  types = TYPES[0..(arity - 1)]
  flat_type = types.join(", ")
  flat_type_options = types.map {|x| "Option[#{x}]"}.join(", ")
  
  method_decl = "#{$indent}def #{joinType}[#{flat_type}]("
  inputs = types.map { |t|
    "#{t.downcase}: CoGroupable[KEY, #{t}]"
  }.join(", ")
  
  value_type = if joinType == "leftJoin" then "VALUE" else "Option[VALUE]" end
  
  puts method_decl + inputs + "): CoGroupable[KEY, (#{value_type}, #{flat_type_options})] = {"

  puts "#{$indent*2}#{joinType}(a)"

  types[1..-1].each { |t|
    puts "#{$indent*3}.#{joinType}(#{t.downcase})"
  }

  puts "#{$indent*3}.flattenGrouped"
  puts "#{$indent}}"
end

puts "// following were autogenerated by #{__FILE__} at #{Time.now} do not edit"
puts %q|package com.twitter.scalding

import com.twitter.scalding.typed.CoGroupable

trait GeneratedCoGroupableMultiJoins[KEY, +VALUE] { self: CoGroupable[KEY, VALUE] =>
  import com.twitter.scalding.FlattenGroup._

|

(2..21).each { |a|
  make_multi_joins("leftJoin", a)
  puts
}

(2..21).each { |a|
  make_multi_joins("outerJoin", a)
  puts
}


puts "}"

puts "// end of autogenerated"
