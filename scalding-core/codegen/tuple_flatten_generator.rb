#!/usr/bin/env ruby

# Run it like this:
#
#   ./codegen/tuple_flatten_generator.rb > src/main/scala/com/twitter/scalding/GeneratedTupleFlatteners.scala

$indent = "  "

TYPES = ('A'..'Z').to_a

def make_nested_type(arity)
  if arity < 2 
    raise "arity < 2 doesn't make sense here"
  end
    
  if arity == 2 
    return "(#{TYPES[0]}, #{TYPES[1]})"
  else
    prev = make_nested_type(arity - 1)
    return "(#{prev}, #{TYPES[arity - 1]})"
  end
end

def make_flatten_tuple(arity)
  nested_type = make_nested_type(arity)
  flat_type = TYPES[0..(arity - 1)].join(", ")
  
  puts "#{$indent}implicit class LeftNestedTupleFlatten#{arity}[#{flat_type}](nested: #{nested_type} ) {"
  puts "#{$indent*2}def flatten: (#{flat_type}) = {"
  puts "#{$indent*3}val #{nested_type.downcase} = nested"
  puts "#{$indent*3}(#{flat_type.downcase})"
  puts "#{$indent*2}}"
  puts "#{$indent}}"
end

def make_alternating_nested_type(arity)
  if arity < 2 
    raise "arity < 2 doesn't make sense here"
  end
    
  if arity == 2 
    return "(Option[#{TYPES[0]}], Option[#{TYPES[1]}])"
  else
    prev = make_alternating_nested_type(arity - 1)
    return "(Option[#{prev}], Option[#{TYPES[arity - 1]}])"
  end
end

def make_flatten_alternating_tuple_option(arity)
  nested_type = make_alternating_nested_type(arity)
  types = TYPES[0..(arity - 1)]
  flat_type = types.join(", ")
  flat_type_options = types.map {|x| "Option[#{x}]"}.join(", ")
  
  puts "#{$indent}implicit class LeftNestedAlternatingTupleOptionFlatten#{arity}[#{flat_type}](nested: #{nested_type} ) {"
  puts "#{$indent*2}def flatten: (#{flat_type_options}) = {"
  puts "#{$indent*3}val (rest1, #{TYPES[arity-1].downcase}) = nested"

  (1..(arity-3)).each do |n|
    puts "#{$indent*3}val (rest#{n+1}, #{TYPES[arity-1-n].downcase}) = rest#{n}.getOrElse(pairOfNones)"
  end
  
  puts "#{$indent*3}val (#{TYPES[0].downcase}, #{TYPES[1].downcase}) = rest#{arity-2}.getOrElse(pairOfNones)"
  
  puts "#{$indent*3}(#{flat_type.downcase})"
  
  puts "#{$indent*2}}"
  puts "#{$indent}}"
end

puts "// following were autogenerated by #{__FILE__} at #{Time.now} do not edit"
puts %q|package com.twitter.scalding

object TupleFlatteners {
  val pairOfNones = (None, None)

|

(3..22).each { |a|
  make_flatten_tuple(a)
  puts
}

puts

(3..22).each { |a|
  make_flatten_alternating_tuple_option(a)
  puts
}

puts "}"

puts "// end of autogenerated"
