// following were autogenerated by ./codegen/multi_join_generator.rb at Thu Nov 20 22:42:31 -0800 2014 do not edit
package com.twitter.scalding

import com.twitter.scalding.typed.CoGroupable

trait GeneratedCoGroupableMultiJoins[KEY, +VALUE] { self: CoGroupable[KEY, VALUE] =>
  import com.twitter.scalding.FlattenGroup._

  def leftJoin[A, B](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B]): CoGroupable[KEY, (VALUE, Option[A], Option[B])] = {
    leftJoin(a)
      .leftJoin(b)
      .flattenValueTuple
  }

  def leftJoin[A, B, C](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J, K](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .leftJoin(k)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J, K, L](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .leftJoin(k)
      .leftJoin(l)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J, K, L, M](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .leftJoin(k)
      .leftJoin(l)
      .leftJoin(m)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .leftJoin(k)
      .leftJoin(l)
      .leftJoin(m)
      .leftJoin(n)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .leftJoin(k)
      .leftJoin(l)
      .leftJoin(m)
      .leftJoin(n)
      .leftJoin(o)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .leftJoin(k)
      .leftJoin(l)
      .leftJoin(m)
      .leftJoin(n)
      .leftJoin(o)
      .leftJoin(p)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P], q: CoGroupable[KEY, Q]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P], Option[Q])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .leftJoin(k)
      .leftJoin(l)
      .leftJoin(m)
      .leftJoin(n)
      .leftJoin(o)
      .leftJoin(p)
      .leftJoin(q)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P], q: CoGroupable[KEY, Q], r: CoGroupable[KEY, R]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P], Option[Q], Option[R])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .leftJoin(k)
      .leftJoin(l)
      .leftJoin(m)
      .leftJoin(n)
      .leftJoin(o)
      .leftJoin(p)
      .leftJoin(q)
      .leftJoin(r)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P], q: CoGroupable[KEY, Q], r: CoGroupable[KEY, R], s: CoGroupable[KEY, S]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P], Option[Q], Option[R], Option[S])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .leftJoin(k)
      .leftJoin(l)
      .leftJoin(m)
      .leftJoin(n)
      .leftJoin(o)
      .leftJoin(p)
      .leftJoin(q)
      .leftJoin(r)
      .leftJoin(s)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P], q: CoGroupable[KEY, Q], r: CoGroupable[KEY, R], s: CoGroupable[KEY, S], t: CoGroupable[KEY, T]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P], Option[Q], Option[R], Option[S], Option[T])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .leftJoin(k)
      .leftJoin(l)
      .leftJoin(m)
      .leftJoin(n)
      .leftJoin(o)
      .leftJoin(p)
      .leftJoin(q)
      .leftJoin(r)
      .leftJoin(s)
      .leftJoin(t)
      .flattenValueTuple
  }

  def leftJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P], q: CoGroupable[KEY, Q], r: CoGroupable[KEY, R], s: CoGroupable[KEY, S], t: CoGroupable[KEY, T], u: CoGroupable[KEY, U]): CoGroupable[KEY, (VALUE, Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P], Option[Q], Option[R], Option[S], Option[T], Option[U])] = {
    leftJoin(a)
      .leftJoin(b)
      .leftJoin(c)
      .leftJoin(d)
      .leftJoin(e)
      .leftJoin(f)
      .leftJoin(g)
      .leftJoin(h)
      .leftJoin(i)
      .leftJoin(j)
      .leftJoin(k)
      .leftJoin(l)
      .leftJoin(m)
      .leftJoin(n)
      .leftJoin(o)
      .leftJoin(p)
      .leftJoin(q)
      .leftJoin(r)
      .leftJoin(s)
      .leftJoin(t)
      .leftJoin(u)
      .flattenValueTuple
  }

  def outerJoin[A, B](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B])] = {
    outerJoin(a)
      .outerJoin(b)
      .flattenValueTuple
  }

  def outerJoin[A, B, C](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J, K](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .outerJoin(k)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J, K, L](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .outerJoin(k)
      .outerJoin(l)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J, K, L, M](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .outerJoin(k)
      .outerJoin(l)
      .outerJoin(m)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .outerJoin(k)
      .outerJoin(l)
      .outerJoin(m)
      .outerJoin(n)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .outerJoin(k)
      .outerJoin(l)
      .outerJoin(m)
      .outerJoin(n)
      .outerJoin(o)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .outerJoin(k)
      .outerJoin(l)
      .outerJoin(m)
      .outerJoin(n)
      .outerJoin(o)
      .outerJoin(p)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P], q: CoGroupable[KEY, Q]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P], Option[Q])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .outerJoin(k)
      .outerJoin(l)
      .outerJoin(m)
      .outerJoin(n)
      .outerJoin(o)
      .outerJoin(p)
      .outerJoin(q)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P], q: CoGroupable[KEY, Q], r: CoGroupable[KEY, R]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P], Option[Q], Option[R])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .outerJoin(k)
      .outerJoin(l)
      .outerJoin(m)
      .outerJoin(n)
      .outerJoin(o)
      .outerJoin(p)
      .outerJoin(q)
      .outerJoin(r)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P], q: CoGroupable[KEY, Q], r: CoGroupable[KEY, R], s: CoGroupable[KEY, S]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P], Option[Q], Option[R], Option[S])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .outerJoin(k)
      .outerJoin(l)
      .outerJoin(m)
      .outerJoin(n)
      .outerJoin(o)
      .outerJoin(p)
      .outerJoin(q)
      .outerJoin(r)
      .outerJoin(s)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P], q: CoGroupable[KEY, Q], r: CoGroupable[KEY, R], s: CoGroupable[KEY, S], t: CoGroupable[KEY, T]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P], Option[Q], Option[R], Option[S], Option[T])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .outerJoin(k)
      .outerJoin(l)
      .outerJoin(m)
      .outerJoin(n)
      .outerJoin(o)
      .outerJoin(p)
      .outerJoin(q)
      .outerJoin(r)
      .outerJoin(s)
      .outerJoin(t)
      .flattenValueTuple
  }

  def outerJoin[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](a: CoGroupable[KEY, A], b: CoGroupable[KEY, B], c: CoGroupable[KEY, C], d: CoGroupable[KEY, D], e: CoGroupable[KEY, E], f: CoGroupable[KEY, F], g: CoGroupable[KEY, G], h: CoGroupable[KEY, H], i: CoGroupable[KEY, I], j: CoGroupable[KEY, J], k: CoGroupable[KEY, K], l: CoGroupable[KEY, L], m: CoGroupable[KEY, M], n: CoGroupable[KEY, N], o: CoGroupable[KEY, O], p: CoGroupable[KEY, P], q: CoGroupable[KEY, Q], r: CoGroupable[KEY, R], s: CoGroupable[KEY, S], t: CoGroupable[KEY, T], u: CoGroupable[KEY, U]): CoGroupable[KEY, (Option[VALUE], Option[A], Option[B], Option[C], Option[D], Option[E], Option[F], Option[G], Option[H], Option[I], Option[J], Option[K], Option[L], Option[M], Option[N], Option[O], Option[P], Option[Q], Option[R], Option[S], Option[T], Option[U])] = {
    outerJoin(a)
      .outerJoin(b)
      .outerJoin(c)
      .outerJoin(d)
      .outerJoin(e)
      .outerJoin(f)
      .outerJoin(g)
      .outerJoin(h)
      .outerJoin(i)
      .outerJoin(j)
      .outerJoin(k)
      .outerJoin(l)
      .outerJoin(m)
      .outerJoin(n)
      .outerJoin(o)
      .outerJoin(p)
      .outerJoin(q)
      .outerJoin(r)
      .outerJoin(s)
      .outerJoin(t)
      .outerJoin(u)
      .flattenValueTuple
  }

}
// end of autogenerated
